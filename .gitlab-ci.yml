stages:
  - clear
  - test
  - build_go
  - build_image
  - deploy

Clear old tag:
  stage: clear
  image: bitnami/git:2-debian-11
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-?.*$/
  script:
    - url_host=`git remote get-url origin | sed -e "s/https:\/\/gitlab-ci-token:.*@//g"`
    - git remote set-url origin "https://gitlab-ci-token:${TAG_DELETE_TOKEN}@${url_host}"
    - if [[ "$CI_COMMIT_TAG" == *"$TAG_TESTING"* ]]; then VERSION_PREFIX=$(echo "$CI_COMMIT_TAG" | cut -d'+' -f1); (for TAG in $(git tag -l "$VERSION_PREFIX*"); do (if [ "$TAG" != "$CI_COMMIT_TAG" ]; then echo "$TAG"; git tag -d "$TAG"; git push --delete origin "$TAG"; fi); done) fi

Spell check:
  stage: test
  image: node:18-alpine3.15
  before_script:
    - cd $CI_PROJECT_DIR
    - npm install -g cspell@latest
  script:
    - cspell "app/**" --config .cspell/configuration.json
    - cspell "auth/**" --config .cspell/configuration.json
    - cspell "controller/**" --config .cspell/configuration.json
    - cspell "exception/**" --config .cspell/configuration.json
    - cspell "helper/**" --config .cspell/configuration.json
    - cspell "model/**" --config .cspell/configuration.json
    - cspell "repository/**" --config .cspell/configuration.json
    - cspell "route/**" --config .cspell/configuration.json
    - cspell "service/**" --config .cspell/configuration.json

Build binary:
  stage: build_go
  image: golang:1.18
  before_script:
    - git config --global url.https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}.insteadOf https://${CI_SERVER_HOST}
    - export GOPRIVATE=${CI_SERVER_HOST}
    - go install honnef.co/go/tools/cmd/staticcheck@latest
    - go install github.com/go-critic/go-critic/cmd/gocritic@latest
  script:
    - gocritic check $(go list ./... | grep -v /vendor/)
    - staticcheck $(go list ./... | grep -v /proto)
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - go test -race $(go list ./... | grep -v /vendor/)
    - go build -o $CI_PROJECT_DIR/binary main.go
  artifacts:
    paths:
      - binary
    expire_in: 1 hour

Build docker image:
  stage: build_image
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-?.*$/
  before_script:
    - mv $ENV_DEV_SKI configuration/.env
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/
    - docker push $CI_REGISTRY/

Deploy:
  stage: deploy
  image: debian:latest
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+-?.*$/
  before_script:
    - "command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )"
    - eval $(ssh-agent -s)
    - echo "$SERVER_
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -p 2122 $SERVER_
  script:
    - scp -P 2122 -v docker-compose.yml $SERVER_
    - ssh -p 2122 $SERVER_
